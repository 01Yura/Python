print() - команда без аргументов (параметров) вставляет пустую строку

По умолчанию команда print() принимает несколько аргументов (параметров), выводит их через один пробел, после чего ставит перевод строки. Это поведение можно изменить, используя необязательные именованные параметры sep (separator, разделитель) и end (окончание).
    print('a', 'b', 'c', sep='*')
    Результатом выполнения такого кода будет:
    a*b*c

Значения по умолчанию у параметров sep и end следующие:
sep=' '   # пробел
end='\n'  # перевод строки

sep='\n' - если сепаратор будет таким, то это превод строки каждый раз при действии сепаратора
end='' - нет перевода строки

Если требуется считать текст с клавиатуры и присвоить его в качестве значения переменным, то можно написать так: 
    name, surname = input(), input()
    print('Имя:', name, 'Фамилия:', surname)

Множественное присваивание удобно использовать, когда нужно обменять значения двух переменных. В Python это делается так:
    name1 = 'Timur'
    name2 = 'Gvido'
    name1, name2 = name2, name1
 
num = int(input()) - чтобы преобразовать строку в целое число
string = str(15) - чтобы преобразовавть число в строку

                            Целочисленное деление
Для положительных чисел оператор целочисленного деления ведёт себя как обычное деление, за исключением того, что он отбрасывает десятичную часть результата. Рассмотрим работу данного оператора на примерах:
    print(10 // 3)  3
    print(10 // 4)  2
    print(10 // 5)  2
    print(10 // 6)  1
    print(10 // 12) 0

При делении отрицательных чисел необходимо помнить, что результат целочисленного деления не превосходит частное. Другими словами, округление берётся в меньшую сторону (число −4 меньше, чем число −3).
Округление всегда происходит в меньшую сторону. Другими словами, -123/10 = -12.3, но мы округляем в меньшую сторону - т.е. до -13
Результатом работы следующей программы:
    print(10 // 3)
    print(-10 // 3)
будут числа:
    3   # округление в меньшую сторону
    -4  # округление в меньшую сторону    

                                Деление с остатком
Оператор деления с остатком возвращает остаток от деления двух целых чисел. Рассмотрим работу данного оператора на примерах:
    print(10 % 3)   1
    print(10 % 4)   2
    print(10 % 5)   0
    print(10 % 6)   4
    print(10 % 12)  10
    print(10 % 20)  10
Примечание 5. Обратите внимание: результатом деления n % m при n < m является число n. Например, 5 % 9 = 5, 3 % 13 = 3 и т.д.

Запомни: последняя цифра числа определяется всегда как остаток от деления числа на 10 (% 10). Чтобы отщепить (избавится от) последнюю цифру от числа, необходимо разделить его нацело на 10 (// 10).
Рассмотрим программу получения цифр трёхзначного числа:

    num = 754
    a = num % 10
    b = (num % 100) // 10
    c = num // 100

    print(a)
    print(b)
    print(c)

Результатом выполнения программы будут три числа:

    4
    5
    7

Пусть дано натуральное число n. Тогда:

    результатом операции n % 10 – является последняя цифра числа;
    результатом операции n // 10 – является число с удаленной последней цифрой.


Модули
import math

num1 = math.sqrt(2)     # вычисление квадратного корня из двух
num2 = math.ceil(3.8)   # округление числа вверх
num3 = math.floor(3.8)  # округление числа вниз

from math import *

num1 = sqrt(2)     # вычисление корня квадратного из двух
num2 = ceil(3.8)   # округление числа вверх
num3 = floor(3.8)  # округление числа вниз

from math import sqrt, ceil

print(sqrt(25))
print(ceil(34.7))

print(floor(12.8))  # приведет к ошибке, так как функция floor не подключена




Чтобы создать виртуальное окружение (venv) для проекта на Python в Visual Studio Code, выполните следующие шаги:

Шаг 1: Открытие проекта в Visual Studio Code
Запустите Visual Studio Code.
Откройте папку с вашим проектом, выбрав File > Open Folder (или Открыть папку, если интерфейс на русском).
Шаг 2: Открытие встроенного терминала
Откройте встроенный терминал в VS Code, нажав Ctrl + `` (клавиша тильда, которая находится под Esc`).
Убедитесь, что вы находитесь в корневой папке проекта.
Шаг 3: Создание виртуального окружения
В терминале выполните следующую команду для создания виртуального окружения:

bash
Копировать код
python -m venv venv
Здесь venv — это имя директории, в которой будет храниться виртуальное окружение. Вы можете назвать её по-другому, если хотите.

Эта команда создаст папку venv в корневой директории вашего проекта, где будет находиться изолированное окружение Python.

Шаг 4: Активация виртуального окружения
Windows:

Выполните команду в терминале для активации виртуального окружения:
.\venv\Scripts\activate

Linux и macOS:
source venv/bin/activate
После активации в терминале должен появиться префикс (venv) (или название вашего окружения), что означает, что виртуальное окружение активировано.

Шаг 5: Настройка VS Code для использования виртуального окружения
После активации виртуального окружения, откройте командную палитру, нажав Ctrl + Shift + P (или Cmd + Shift + P на macOS).
Введите Python: Select Interpreter и выберите эту команду.
Выберите интерпретатор Python, который находится внутри вашего виртуального окружения (venv). Обычно он будет называться что-то вроде venv\Scripts\python.exe (на Windows) или venv/bin/python (на Linux/macOS).
Шаг 6: Установка зависимостей
Убедитесь, что виртуальное окружение активировано.

Установите необходимые пакеты, используя pip:

bash
Копировать код
pip install package_name
Если у вас есть файл requirements.txt, вы можете установить все зависимости разом:

bash
Копировать код
pip install -r requirements.txt
Шаг 7: Деактивация виртуального окружения
Когда вы завершите работу, вы можете деактивировать виртуальное окружение, выполнив команду:

bash
Копировать код
deactivate
Теперь ваше виртуальное окружение настроено, и VS Code будет использовать его для запуска вашего кода, выполнения тестов и работы с зависимостями.






